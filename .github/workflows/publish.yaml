# .github/workflows/<some name>.yaml
name: Build, Test, and Publish

on:
  pull_request:
    types: [opened, synchronize]
  push:
    branches:
      - main
  workflow_dispatch:

jobs:

  check-version-txt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Tag with the release version
        run: |
          git tag $(cat version.txt)

  lint-format-and-static-code-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.8
        uses: actions/setup-python@v3
        with:
          python-version: 3.8
      - name: Install pre-commit
        run: |
          pip install pre-commit
      - name: Lint, format, and otther static code quality checks
        run: |
          /bin/bash -x run.sh  lint:ci

  build-wheel-and-sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.8
        uses: actions/setup-python@v3
        with:
          python-version: 3.8
      - name: Tag with the release version
        run: |
          git tag $(cat version.txt)
      - name: Install build CLI
        run: |
          pip install build
      - name: Build Python package
        run: |
          /bin/bash -x run.sh build
      - name: Upload package artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wheel-and-sdist
          path: ./dist/*

  execute-tests:
    needs:
      - build-wheel-and-sdist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.8
        uses: actions/setup-python@v3
        with:
          python-version: 3.8
      - name: Download wheel and sdist
        uses: actions/download-artifact@v3
        with:
          name: wheel-and-sdist
          path: ./dist/
      - name: Install test dependencies
        run: |
          pip install pytest pytest-cov ./dist/*.whl
      - name: Lint, format, and otther static code quality checks
        run: |
          /bin/bash -x run.sh  test:ci
  
  publish:
    needs:
      - execute-tests
      - build-wheel-and-sdist
      - lint-format-and-static-code-checks
      - check-version-txt
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.8
        uses: actions/setup-python@v3
        with:
          python-version: 3.8
      - name: Download wheel and sdist
        uses: actions/download-artifact@v3
        with:
          name: wheel-and-sdist
          path: ./dist/
      - name: Install twine
        run: |
          pip install twine
      - name: Publish to TestPyPi
        run: |
          /bin/bash -x run.sh publish:test
        env:
          TEST_PYPI_TOKEN: ${{ secrets.TEST_PYPI_TOKEN }}
      - name: Publish to Prod PyPi
        run: |
          /bin/bash -x run.sh publish:prod
        env:
          PROD_PYPI_TOKEN: ${{ secrets.PROD_PYPI_TOKEN }}
      - name: Push Tags
        run: |
          git push origin --tags


  # https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs
  dump_contexts_to_log:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"
      - name: Dump secrets
        env:
          SECRETS: ${{ toJson(secrets) }}
        run: echo "$SECRETS"
      - name: Dump vars
        env:
          VARS: ${{ toJson(vars) }}
        run: echo "$VARS"
